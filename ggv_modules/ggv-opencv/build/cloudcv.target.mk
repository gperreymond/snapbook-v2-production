# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := cloudcv
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=cloudcv' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DTARGET_PLATFORM_LINUX' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-std=gnu++11 \
	-fexceptions \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti

INCS_Debug := \
	-I/home/ubuntu/.node-gyp/0.12.9/include/node \
	-I/home/ubuntu/.node-gyp/0.12.9/src \
	-I/home/ubuntu/.node-gyp/0.12.9/deps/uv/include \
	-I/home/ubuntu/.node-gyp/0.12.9/deps/v8/include \
	-I$(srcdir)/src \
	-I$(srcdir)/node_modules/nan \
	-I/home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/include

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=cloudcv' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DTARGET_PLATFORM_LINUX'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-std=gnu++11 \
	-fexceptions \
	-O3 \
	-ffunction-sections \
	-fdata-sections \
	-fno-tree-vrp \
	-fno-tree-sink \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti

INCS_Release := \
	-I/home/ubuntu/.node-gyp/0.12.9/include/node \
	-I/home/ubuntu/.node-gyp/0.12.9/src \
	-I/home/ubuntu/.node-gyp/0.12.9/deps/uv/include \
	-I/home/ubuntu/.node-gyp/0.12.9/deps/v8/include \
	-I$(srcdir)/src \
	-I$(srcdir)/node_modules/nan \
	-I/home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/include

OBJS := \
	$(obj).target/$(TARGET)/src/cloudcv.o \
	$(obj).target/$(TARGET)/src/framework/marshal/marshal.o \
	$(obj).target/$(TARGET)/src/framework/marshal/stl.o \
	$(obj).target/$(TARGET)/src/framework/marshal/opencv.o \
	$(obj).target/$(TARGET)/src/framework/marshal/primitives.o \
	$(obj).target/$(TARGET)/src/framework/marshal/node_object_builder.o \
	$(obj).target/$(TARGET)/src/framework/Image.o \
	$(obj).target/$(TARGET)/src/framework/ImageSource.o \
	$(obj).target/$(TARGET)/src/framework/Job.o \
	$(obj).target/$(TARGET)/src/framework/Async.o \
	$(obj).target/$(TARGET)/src/framework/NanCheck.o \
	$(obj).target/$(TARGET)/src/modules/common/Numeric.o \
	$(obj).target/$(TARGET)/src/modules/common/ImageUtils.o \
	$(obj).target/$(TARGET)/src/modules/analyze/analyze.o \
	$(obj).target/$(TARGET)/src/modules/analyze/binding.o \
	$(obj).target/$(TARGET)/src/modules/analyze/dominantColors.o \
	$(obj).target/$(TARGET)/src/modules/buildInformation/buildInformation.o \
	$(obj).target/$(TARGET)/src/modules/cameraCalibration/CameraCalibrationBinding.o \
	$(obj).target/$(TARGET)/src/modules/cameraCalibration/CameraCalibrationAlgorithm.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	/home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_calib3d.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_core.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_features2d.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_flann.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_highgui.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_imgcodecs.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_imgproc.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_ml.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_objdetect.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_photo.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_shape.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_stitching.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_superres.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_ts.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_video.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_videoio.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/lib/libopencv_videostab.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/share/OpenCV/3rdparty/lib/libippicv.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/share/OpenCV/3rdparty/lib/liblibjpeg.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/share/OpenCV/3rdparty/lib/liblibpng.a /home/ubuntu/workspace/git/abibao/snapbook-v1-production/ggv_modules/ggv-opencv/node_modules/native-opencv/opencv/share/OpenCV/3rdparty/lib/libzlib.a

$(obj).target/cloudcv.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/cloudcv.node: LIBS := $(LIBS)
$(obj).target/cloudcv.node: TOOLSET := $(TOOLSET)
$(obj).target/cloudcv.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/cloudcv.node
# Add target alias
.PHONY: cloudcv
cloudcv: $(builddir)/cloudcv.node

# Copy this to the executable output path.
$(builddir)/cloudcv.node: TOOLSET := $(TOOLSET)
$(builddir)/cloudcv.node: $(obj).target/cloudcv.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/cloudcv.node
# Short alias for building this executable.
.PHONY: cloudcv.node
cloudcv.node: $(obj).target/cloudcv.node $(builddir)/cloudcv.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/cloudcv.node

